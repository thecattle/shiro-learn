<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">

        <!--
        Shiro默认会使用Servlet容器的Session，此时修改超时时间的话，可以修改web.xml或者这里自定义的MyRealm
        而若想使用Shiro原生Session则可以设置sessionMode属性为native，此时修改超时时间则只能修改MyRealm
        -->
        <!-- <property name="sessionMode" value="native"/> -->

        <!--配置 session 管理-->
        <property name="sessionManager" ref="sessionManager"></property>
        <!--配置 记住我-->
        <property name="rememberMeManager" ref="rememberMeManager"></property>

        <!-- 指定Shiro验证用户登录的类为自定义的Realm -->
        <!--<property name="realm">-->
        <!--<ref bean="myRealm"/>-->
        <!--</property>-->

        <!-- 配置多个Realm的登录认证 -->
        <property name="authenticator" ref="authenticator"></property>
        <!-- 配置多个Realm的权限认证 -->
        <property name="authorizer" ref="authorizer"></property>

    </bean>

    <!--rememberMeManager管理 配置-->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <!--设置超时时间 单位 秒，一天=86400-->
                <constructor-arg value="shiro-cookie"></constructor-arg>
                <property name="maxAge" value="86400"></property>
                <property name="httpOnly" value="true"></property>
            </bean>
        </property>
    </bean>

    <!--session管理 配置-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--session 过期时间 单位 毫秒，2400000=40min-->
        <property name="globalSessionTimeout" value="2400000"></property>

        <!--有需要可以自行配置-->
        <!--<property name="cacheManager" ref="xxxx"></property>-->
        <!--有需要可以自行配置-->
        <!--<property name="sessionDAO" ref="xxx"></property>-->
    </bean>

    <!--配置多个 realm 的权限权限认证-->
    <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <property name="realms">
            <list>
                <ref bean="otherRealm"/>
                <ref bean="myRealm"/>
            </list>
        </property>
    </bean>
    <!-- 配置多个Realm -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">


        <!--验证的时候，是用迭代器，所以可以认为验证的顺序就是这个 list 的顺序-->
        <property name="realms">
            <list>
                <ref bean="otherRealm"/>
                <ref bean="myRealm"/>
            </list>
        </property>
        <property name="authenticationStrategy">

            <!--所有 realm 认证通过才算登录成功-->
            <!--<bean id="authenticationStrategy" class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>-->
            <!--验证某个 realm 成功后直接返回，不会验证后面的 realm 了-->
            <!--<bean id="authenticationStrategy" class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"/>-->
            <!--所有的 realm 都会验证，其中一个成功，也会继续验证后面的 realm，最后返回成功-->
            <bean id="authenticationStrategy" class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!-- 配置Realm -->
    <bean id="myRealm" class="com.sunp.shiro.myRealm">
        <!-- 配置密码匹配器 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- 加密算法为MD5 -->
                <property name="hashAlgorithmName" value="SHA-256"></property>
                <!-- 加密次数 -->
                <property name="hashIterations" value="1024"></property>
                <!--是否存储散列后的密码为16进制，为 true：.toHex()，为 false：.toBase64()-->
                <property name="storedCredentialsHexEncoded" value="false"></property>
            </bean>
        </property>
    </bean>

    <bean id="otherRealm" class="com.sunp.shiro.otherRealm">
        <!-- 配置密码匹配器 -->
        <!--<property name="credentialsMatcher">-->
            <!--<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
                <!--&lt;!&ndash; 加密算法为MD5 &ndash;&gt;-->
                <!--<property name="hashAlgorithmName" value="MD5"></property>-->
                <!--&lt;!&ndash; 加密次数 &ndash;&gt;-->
                <!--<property name="hashIterations" value="1024"></property>-->
            <!--</bean>-->
        <!--</property>-->
    </bean>

    <!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，并且Shiro对基于Spring的Web应用提供了完美的支持 -->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
    <bean id="shiroFilter" class="com.sunp.shiro.MyShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接（可根据项目的URL进行替换），非必须的属性，默认会找Web工程根目录下的[/login.jsp] -->
        <property name="loginUrl" value="/sunp/toLogin"/>
        <!-- 登录成功后要跳转的连接-->
         <!--<property name="successUrl" value="/sunp/loginSuccess"/>-->
        <!--
        用户访问未授权的资源时，所显示的连接
        -->
        <property name="unauthorizedUrl" value="/sunp/unauthorized"/>
        <!--
        Shiro连接约束配置，即过滤链的定义
        下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的
        anon：它对应的过滤器里面是空的，什么都没做，另外.do和.jsp后面的*表示参数，比方说[login.jsp?main]这种
        authc：该过滤器下的页面必须验证后才能访问，它是内置的org.apache.shiro.web.filter.authc.FormAuthenticationFilter
        注意：对于相似的资源，需要将anon的设置放在authc前面，anon才会生效，因为Shiro是从上往下匹配URL的，匹配成功便不再匹配了
        -->
        <property name="filterChainDefinitions" value=""></property>
        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--/sunp/** = anon-->
                <!--/admin/** = authc,roles[admin],perms[admin:list]-->
                <!--/manager/** = authc,roles[manager],perms[manager:list]-->
            <!--</value>-->
        <!--</property>-->
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>